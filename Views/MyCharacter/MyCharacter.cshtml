@model CharacterSheetDnD.ViewModels.MyCharacterViewModel


@{
	ViewData["Title"] = "My Character";
}

<div id="loadingScreen" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: white; z-index: 99; display: flex; justify-content: center; align-items: center;">
	<div style="text-align: center;">
		<p>Loading your character...</p>
		<img src="~/images/dice-d20.png" alt="Loading..." class="spinner">
	</div>
</div>



<!-- TITLE -->
<div style="display:none;" id="characterContent">
	<!-- Name - Race - Class - Level-->
	<div class="text-center mb-4">
		<h3>
			@Model.Name -
			@Model.Race -
			@foreach (var characterClass in Model.CharacterClasses)
			{
				<text>@characterClass.Class Level @characterClass.Level</text>
			}
		</h3>
	</div>
</div>


<!-- TOP DISPLAY -->
@await Html.PartialAsync("_TopDisplay", Model)




<div class="accordion" id="accordionPanelsStayOpenExample">
	<!-- STATISTICS -->
	<div class="accordion-item">
		@await Html.PartialAsync("_Statistics", Model)
	</div>

	<!-- SAVING THROWS -->
	<div class="accordion-item">
		@await Html.PartialAsync("_SavingThrows", Model)
	</div>

	<!-- SKILLS -->
	<div class="accordion-item">
		<h2 class="accordion-header" id="panelsStayOpen-heading3">
			<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapse3" aria-expanded="false" aria-controls="panelsStayOpen-collapse3">
				SKILLS
			</button>
		</h2>
		<div id="panelsStayOpen-collapse3" class="accordion-collapse collapse" aria-labelledby="panelsStayOpen-heading3">
			<div class="accordion-body">
				<strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
			</div>
		</div>
	</div>



</div>



@section Scripts {
	<script>
		window.addEventListener('DOMContentLoaded', (event) => {
			setTimeout(function () {
				document.getElementById('loadingScreen').style.display = 'none';
				document.getElementById('characterContent').style.display = 'block';
			}, 2000); // 2000 milliseconds = 2 seconds
		});
	</script>
}

<style>
	.spinner {
		width: 120px;
		height: 120px;
		animation: spin 2s linear 0s 2; /* Adjust 2s for duration, 0s for delay, and 2 for the number of times it spins */
	}

	@@-webkit-keyframes spin {
		0% {
			-webkit-transform: rotate(0deg);
		}

		100% {
			-webkit-transform: rotate(360deg);
		}
	}

	@@keyframes spin {
		0% {
			transform: rotate(0deg);
		}

		100% {
			transform: rotate(360deg);
		}
	}
</style>
